{"version":3,"sources":["../src/api.ts","../src/routes/helloRoute.ts","../src/routes/geocoding.ts","../../database-services/src/buildings.ts","../src/routes/buildings.ts","../src/index.ts"],"sourcesContent":["import fastify from 'fastify';\nimport { helloRoute, geocodingRoute, buildingsRoute } from './routes';\nimport swagger from \"@fastify/swagger\"\nimport swaggerUI from '@fastify/swagger-ui'\n\nconst AUTH_HEADER = 'X-API-Key'\n\nexport async function createBackendApi() {\n  const app = fastify({ logger: true });\n\n\n  // Placeholder for proper authentication\n  app.decorate('authenticate', async (request, reply) => {\n    if (!(AUTH_HEADER.toLowerCase() in request.headers)){\n      return reply.code(401).send({ error: 'Missing X-API-Key header' });\n    }\n    if (request.headers[AUTH_HEADER.toLowerCase()] !== \"open-sesame\") {\n      return reply.code(403).send({ error: 'Incorrect Auth token' });\n    }\n  });\n\n\n  // Needs to be registered before routes\n  await app.register(swagger, {\n    openapi: {\n      openapi: '3.0.0',\n      info: {\n        title: 'Norm Coding challenge',\n      },\n      servers: [\n        {\n          url: 'http://localhost:3000',\n          description: 'Development server'\n        }\n      ],\n      tags: [],\n      components: {\n        securitySchemes: {\n          apiKey: {\n            type: 'apiKey',\n            name: 'X-API-Key',\n            in: 'header'\n          }\n        }\n      },\n      security: [{apiKey: []}],\n      externalDocs: {}\n    }\n  })\n\n  // Register routes\n  app.register(helloRoute);\n  app.register(geocodingRoute);\n  app.register(buildingsRoute);\n\n  // Add health check endpoint\n  app.get('/status', async () => {\n    return { status: 'ok' };\n  });\n\n\n\n  await app.register(swaggerUI, {\n    routePrefix: '/docs',\n    uiConfig: {\n      docExpansion: 'full',\n      deepLinking: false\n    },\n    uiHooks: {\n      onRequest: function (request, reply, next) { next() },\n      preHandler: function (request, reply, next) { next() }\n    },\n    staticCSP: true,\n    transformStaticCSP: (header) => header,\n    transformSpecification: (swaggerObject, request, reply) => { return swaggerObject },\n    transformSpecificationClone: true\n  })\n\n  return app;\n}\n","import { FastifyInstance } from 'fastify';\n\nexport const helloRoute = (fastify: FastifyInstance) => {\n  fastify.route({\n    method: 'POST',\n    url: '/webhook',\n    handler: async (request, reply) => {\n      const data = request.body;\n      console.log({ data });\n      return reply.send(data);\n    },\n  });\n};\n","import { FastifyInstance } from 'fastify';\n\nclass Location {\n  constructor(public address: Address, public coordinates: Coordinate) {}\n}\n\nclass Address {\n  constructor(\n    public line1: string,\n    public postcode: string,\n    public city: string,\n    public countryCode: string\n  ) {}\n}\n\nclass Coordinate {\n  constructor(public lat: string, public lon: string) {}\n}\n\n// Created by an LLM\nconst DETAIL_SPLIT_REGEX = /^(.+?)\\s*<b>\\s*(\\d+)\\s+([^<]+)\\s*<\\/b>$/\n\nasync function getLocations(searchText: string, limit: number = 10): Promise<Location[]> {\n  const resp = await fetch('https://api3.geo.admin.ch/rest/services/api/SearchServer?' +\n    new URLSearchParams({\n      searchText: searchText,\n      type: 'locations',\n    }).toString()\n  )\n\n  if (!resp.ok) {\n    throw new Error(\"Gateway Error\")\n  }\n\n  const locs = await resp.json()\n  let result = locs.results.map(l => {\n    if (!l.attrs.label) {\n      throw new Error(\"Missing label\")\n    }\n    let match = l.attrs.label.match(DETAIL_SPLIT_REGEX);\n    return new Location(\n      new Address(\n        match[1],\n        match[2],\n        match[3],\n        \"CH\"\n      ),\n      new Coordinate(\n        l.attrs.lat,\n        l.attrs.lon\n      )\n  )\n  })\n\n  result = result.slice(0, limit)\n  return result\n}\n\nexport const geocodingRoute = (fastify: FastifyInstance) => {\n\n  // I didn't see a good way to just use typescript for this :(\n  fastify.addSchema({\n      $id: 'location',\n      type: 'object',\n      properties: {\n        address: {\n          type: 'object',\n          properties: {\n            line1: { type: 'string' },\n            postcode: { type: 'string' },\n            city: { type: 'string' },\n            countryCode: { type: 'string' }\n          }\n        },\n        coordinates: {\n          type: 'object',\n          properties: {\n            lat: { type: 'string' },\n            lon: { type: 'string' }\n          }\n        }\n      }\n  })\n\n\n\n  fastify.route({\n    method: 'POST',\n    preHandler: fastify.authenticate,\n    url: '/v1/geocoding',\n    handler: async (request, reply) => {\n      const { searchText, limit } = request.body as { searchText: string; limit?: number };\n      return reply.send(await getLocations(searchText, limit));\n    },\n    schema: {\n      body: {\n        type: 'object',\n        required: ['searchText'],\n        properties: {\n          searchText: { type: 'string' },\n          limit: { type: 'number', maximum: 10 }\n        }\n      },\n      response: {\n        200: {\n          type: 'array',\n          items: { $ref: 'location' }\n        }\n      }\n    }\n  });\n};\n\n","import { Building } from '@challenge/library-schemas';\n\n// In-memory database for buildings\nconst DB: Record<string, Building> = {};\n\n// Type definition for flattened building data\nexport type FlatBuildingData = {\n  line1?: string;\n  postCode?: string;\n  city?: string;\n  countryCode?: string;\n  attachmentType?: string;\n  constructionYear?: number;\n  floorCount?: number;\n  heatedArea?: number;\n  heatingType?: string;\n  heatingInstallationYear?: number;\n  photovoltaicNominalPower?: number;\n  basementCeilingRenovationYear?: number;\n  facadeRenovationYear?: number;\n  roofRenovationYear?: number;\n  windowsRenovationYear?: number;\n};\n\n// Convert flat structure to nested Building structure\nexport const flatToNested = (flatData: FlatBuildingData, id?: string): Partial<Building> => {\n  const { \n    line1, postCode, city, countryCode, \n    ...otherProps \n  } = flatData;\n  \n  const result: Partial<Building> = { ...otherProps };\n  \n  // Add id if provided\n  if (id) result.id = id;\n  \n  // Add address if any address fields are provided\n  if (line1 !== undefined || postCode !== undefined || city !== undefined || countryCode !== undefined) {\n    result.address = {\n      ...(line1 !== undefined && { line1 }),\n      ...(postCode !== undefined && { postCode }),\n      ...(city !== undefined && { city }),\n      ...(countryCode !== undefined && { countryCode })\n    };\n  }\n  \n  return result;\n};\n\n// A simple utility to create or update a building with clean properties\nexport const updateBuildingProperties = (\n  existingBuilding: Partial<Building> | null,\n  updates: Partial<Building>\n): Building => {\n  // Start with existing building or an empty object\n  const result: Partial<Building> = { ...existingBuilding || {} };\n  \n  // Process address field specially to handle nested properties\n  if (updates.address) {\n    // Start with existing address or empty object\n    result.address = { ...(result.address || {}), ...updates.address };\n  }\n  \n  // Copy all other top-level fields (excluding address which we handled separately)\n  Object.entries(updates).forEach(([key, value]) => {\n    if (key !== 'address' && value !== undefined) {\n      result[key as keyof Building] = value;\n    }\n  });\n  \n  return result as Building;\n};\n\nexport const loadBuilding = (id: string): Building | null => {\n  return DB[id] ? { ...DB[id] } : null;\n};\n\nexport const createBuilding = (id: string, building: Building): Building => {\n  const newBuilding = { ...building, id };\n  DB[id] = newBuilding;\n  return { ...newBuilding };\n};\n\nexport const updateBuilding = (id: string, building: Building): Building => {\n  DB[id] = { ...building };\n  return { ...building };\n};\n\nexport const deleteBuilding = (id: string): boolean => {\n  if (!(id in DB)) {\n    return false;\n  }\n  \n  delete DB[id];\n  return true;\n};\n","import { FastifyInstance } from 'fastify';\nimport { Building, BuildingSchema, AddressSchema } from '@challenge/library-schemas';\nimport { \n  loadBuilding, \n  createBuilding, \n  updateBuilding, \n  deleteBuilding, \n  updateBuildingProperties,\n  flatToNested,\n  FlatBuildingData\n} from '@challenge/database-services';\n\nexport const buildingsRoute = (fastify: FastifyInstance) => {\n  // Register JSON schemas for Swagger documentation\n  // Define building schema manually since zod's shape doesn't translate directly to JSON schema\n  fastify.addSchema({\n    $id: 'building',\n    type: 'object',\n    properties: {\n      id: { type: 'string' },\n      address: { $ref: 'address' },\n      attachmentType: { type: 'string' },\n      constructionYear: { type: 'number' },\n      floorCount: { type: 'number' },\n      heatedArea: { type: 'number' },\n      heatingType: { type: 'string' },\n      heatingInstallationYear: { type: 'number' },\n      photovoltaicNominalPower: { type: 'number' },\n      basementCeilingRenovationYear: { type: 'number' },\n      facadeRenovationYear: { type: 'number' },\n      roofRenovationYear: { type: 'number' },\n      windowsRenovationYear: { type: 'number' }\n    }\n  });\n\n  fastify.addSchema({\n    $id: 'address',\n    type: 'object',\n    properties: {\n      line1: { type: 'string' },\n      postCode: { type: 'string' },\n      city: { type: 'string' },\n      countryCode: { type: 'string' }\n    }\n  });\n  \n  // Flat building schema for request bodies\n  fastify.addSchema({\n    $id: 'flatBuilding',\n    type: 'object',\n    properties: {\n      line1: { type: 'string' },\n      postCode: { type: 'string' },\n      city: { type: 'string' },\n      countryCode: { type: 'string', default: 'CH' },\n      attachmentType: { type: 'string' },\n      constructionYear: { type: 'number' },\n      floorCount: { type: 'number' },\n      heatedArea: { type: 'number' },\n      heatingType: { type: 'string' },\n      heatingInstallationYear: { type: 'number' },\n      photovoltaicNominalPower: { type: 'number' },\n      basementCeilingRenovationYear: { type: 'number' },\n      facadeRenovationYear: { type: 'number' },\n      roofRenovationYear: { type: 'number' },\n      windowsRenovationYear: { type: 'number' }\n    }\n  });\n\n  // GET - Read a building by ID\n  fastify.route({\n    method: 'GET',\n    url: '/v1/buildings/:id',\n    handler: async (request, reply) => {\n      const { id } = request.params as { id: string };\n      const building = loadBuilding(id);\n\n      if (!building) {\n        return reply.code(404).send({ error: 'Building not found' });\n      }\n\n      return reply.send(building);\n    },\n    schema: {\n      params: {\n        type: 'object',\n        required: ['id'],\n        properties: {\n          id: { type: 'string' }\n        }\n      },\n      response: {\n        200: { $ref: 'building' },\n        404: {\n          type: 'object',\n          properties: {\n            error: { type: 'string' }\n          }\n        }\n      }\n    }\n  });\n\n  // PUT - Create a new building\n  fastify.route({\n    method: 'PUT',\n    url: '/v1/buildings/:id',\n    handler: async (request, reply) => {\n      const { id } = request.params as { id: string };\n      \n      // Get request body and ensure countryCode default\n      const flatData = request.body as FlatBuildingData;\n      if (flatData.countryCode === undefined) {\n        flatData.countryCode = 'CH';\n      }\n      \n      // Convert to nested structure and add ID\n      const nestedData = flatToNested(flatData, id);\n      \n      // Create building with clean properties\n      const building = updateBuildingProperties(null, nestedData);\n      \n      // Store in database\n      const createdBuilding = createBuilding(id, building);\n      return reply.code(201).send(createdBuilding);\n    },\n    schema: {\n      params: {\n        type: 'object',\n        required: ['id'],\n        properties: {\n          id: { type: 'string' }\n        }\n      },\n      body: { $ref: 'flatBuilding' },\n      response: {\n        201: { $ref: 'building' },\n        400: {\n          type: 'object',\n          properties: {\n            error: { type: 'string' }\n          }\n        }\n      }\n    }\n  });\n\n  // PATCH - Update an existing building\n  fastify.route({\n    method: 'PATCH',\n    url: '/v1/buildings/:id',\n    handler: async (request, reply) => {\n      const { id } = request.params as { id: string };\n      const existingBuilding = loadBuilding(id);\n\n      if (!existingBuilding) {\n        return reply.code(404).send({ error: 'Building not found' });\n      }\n\n      // Convert flat data to nested structure\n      const updates = flatToNested(request.body as FlatBuildingData);\n      \n      // Create an updated building with clean properties\n      const updatedBuilding = updateBuildingProperties(existingBuilding, updates);\n\n      // Store in database\n      const result = updateBuilding(id, updatedBuilding);\n      return reply.send(result);\n    },\n    schema: {\n      params: {\n        type: 'object',\n        required: ['id'],\n        properties: {\n          id: { type: 'string' }\n        }\n      },\n      body: { $ref: 'flatBuilding' },\n      response: {\n        200: { $ref: 'building' },\n        404: {\n          type: 'object',\n          properties: {\n            error: { type: 'string' }\n          }\n        }\n      }\n    }\n  });\n\n  // DELETE - Remove a building\n  fastify.route({\n    method: 'DELETE',\n    url: '/v1/buildings/:id',\n    handler: async (request, reply) => {\n      const { id } = request.params as { id: string };\n      const success = deleteBuilding(id);\n\n      if (!success) {\n        return reply.code(404).send({ error: 'Building not found' });\n      }\n\n      return reply.code(204).send();\n    },\n    schema: {\n      params: {\n        type: 'object',\n        required: ['id'],\n        properties: {\n          id: { type: 'string' }\n        }\n      },\n      response: {\n        204: {\n          type: 'null',\n          description: 'Building successfully deleted'\n        },\n        404: {\n          type: 'object',\n          properties: {\n            error: { type: 'string' }\n          }\n        }\n      }\n    }\n  });\n};\n","import { createBackendApi } from './api';\n\nconst start = async () => {\n  const api = await createBackendApi();\n\n  const port = parseInt(process.env.PORT ?? '3000');\n  const host = process.env.HOST ?? 'localhost';\n\n  try {\n    api.ready(() => {\n      console.log(api.printRoutes());\n    });\n\n    await api.listen({ port, host });\n\n    console.log(`\\nServer is running: http://${host}:${port}\\n`);\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n};\n\nstart();\n"],"mappings":"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","names":["fastify","fastify","fastify"]}